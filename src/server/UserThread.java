package server;

import java.io.*;
import java.net.*;
 
/**
 * This thread handles connection for each connected client, so the server
 * can handle multiple clients at the same time.
 * 
 * Note that each 'client' is a unique username+group combination.
 * Therefore, a user in 4 groupchats will have 4 client connections.
 *
 * @author www.codejava.net
 * @author Adapted by Sean McNamee
 */
public class UserThread extends Thread {
    private Socket socket; 
    private String username, group; //The unique identifier for a thread
    private ChatServer server; //Because it has to broadcast messages to everyone

    private PrintWriter writer;

    //TODO deal with securely closing sockets better?
    //This isn't even triggered. Should the client just send this when their application is closed?
    //Should this be generated by the client and sent here along with the username and group?
    private static String ENDING_STRING = "fjkdsafueiwfjdsafuernavahkfjdsa";
 
    public UserThread(Socket socket, ChatServer server) {
        this.socket = socket;
        this.server = server;
    }
 
    /**
     * Initializes reader and writer. Recieves identifier information (username/group)
     * Waits for input from the socket so it can be broadcasted.
     */
    public void run() {
        try {
            InputStream input = socket.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(input));
 
            OutputStream output = socket.getOutputStream();
            writer = new PrintWriter(output, true);
 
            printUsers();
 
            String userName = reader.readLine();
            String groupName = reader.readLine();
            this.username = userName;
            this.group = groupName;

            
 
            String serverMessage = "New user connected to " + groupName + ": " + userName;
            server.broadcast(serverMessage, this);
 
            String clientMessage;
            
            //Broadcast any recieved message. Note the variable names
            do {
                clientMessage = reader.readLine(); //In from the client
                serverMessage = clientMessage;
                server.broadcast(serverMessage, this); //Out from the server
 
            } while (!clientMessage.equals(ENDING_STRING));
 
            server.removeUser(this);
            socket.close();
 
            serverMessage = userName + " has quitted.";
            server.broadcast(serverMessage, this);
 
        } catch (IOException ex) {
            System.out.println("Error in UserThread: " + ex.getMessage());
            ex.printStackTrace();
        }
    }
 
    /**
     * Sends a messaged baesd on if other users are connected
     * 
     * TODO send a list of online users to the newly connected user.
     * We can send over other data types as well (character array buffers)
     */
    void printUsers() {
        if (server.hasUsers()) {
            writer.println("Welcome to " + group);
        } else {
            writer.println("No other users connected");
        }
    }
 
    /**
     * Sends a message to the client.
     */
    void sendMessage(String message) {
        writer.println(message);
    }

    public String getUserName() {
        return username;
    }

    public void setUserName(String name) {
        this.username = name;
    }

    public String getGroup() {
        return group;
    }

    public void setGroup(String group) {
        this.group = group;
    }

    
}